/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef TESLA_CAN_H
#define TESLA_CAN_H

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" { 
#endif

typedef struct {
	uint16_t StW_Angl; /* scaling 0.5, offset -2048.0, units deg  */
	uint16_t StW_AnglSpd; /* scaling 0.5, offset -2048.0, units /s  */
	uint8_t CRC_STW_ANGL_STAT; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MC_STW_ANGL_STAT; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_AnglSens_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_AnglSens_Id; /* scaling 1.0, offset 0.0, units none  */
} can_0x003_STW_ANGL_STAT_t;

typedef struct {
	uint16_t StW_AnglHP; /* scaling 0.1, offset -819.2, units deg  */
	uint16_t StW_AnglHP_Spd; /* scaling 0.5, offset -4096.0, units deg/s  */
	uint8_t CRC_STW_ANGLHP_STAT; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MC_STW_ANGLHP_STAT; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_AnglHP_Sens_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_AnglHP_Sens_Id; /* scaling 1.0, offset 0.0, units none  */
} can_0x00e_STW_ANGLHP_STAT_t;

typedef struct {
	uint8_t DTR_Dist_Rq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t CRC_STW_ACTN_RQ; /* scaling 1.0, offset 0.0, units none  */
	uint8_t SpdCtrlLvr_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MC_STW_ACTN_RQ; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Lvr_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t WprSw6Posn; /* scaling 1.0, offset 0.0, units none  */
	uint8_t TurnIndLvr_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t HiBmLvr_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t WprWashSw_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t WprWash_R_Sw_Posn_V2; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Cond_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t HrnSw_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t VSL_Enbl_Rq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t SpdCtrlLvrStat_Inv; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Cond_Flt; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw00_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw01_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw02_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw03_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw04_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw05_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw06_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw07_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw08_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw09_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw10_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw11_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw12_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw13_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw14_Psd; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw15_Psd; /* scaling 1.0, offset 0.0, units none  */
} can_0x045_STW_ACTN_RQ_t;

typedef struct {
	uint8_t CRC_SBW_RQ_SCCM; /* scaling 1.0, offset 0.0, units none  */
	uint8_t TSL_RND_Posn_StW; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MC_SBW_RQ_SCCM; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Sw_Stat3; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MsgTxmtId; /* scaling 1.0, offset 0.0, units none  */
	uint8_t TSL_P_Psd_StW; /* scaling 1.0, offset 0.0, units none  */
} can_0x06d_SBW_RQ_SCCM_t;

typedef struct {
	uint8_t GTW_epasControlChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasPowerMode; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasControlCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasTuneRequest; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasControlType; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasEmergencyOn; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_epasLDWEnabled; /* scaling 1.0, offset 0.0, units none  */
} can_0x101_GTW_epasControl_t;

typedef struct {
	int16_t DI_motorRPM; /* scaling 1.0, offset 0.0, units RPM  */
	int16_t DI_torqueDriver; /* scaling 0.2, offset 0.0, units Nm  */
	int16_t DI_torqueMotor; /* scaling 0.2, offset 0.0, units Nm  */
	uint8_t DI_pedalPos; /* scaling 0.4, offset 0.0, units %  */
	uint8_t DI_torque1Checksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_torque1Counter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_soptState; /* scaling 1.0, offset 0.0, units none  */
} can_0x108_DI_torque1_t;

typedef struct {
	int16_t DI_torqueEstimate; /* scaling 0.5, offset 0.0, units Nm  */
	uint16_t DI_vehicleSpeed; /* scaling 0.1, offset -25.0, units MPH  */
	uint8_t DI_torque2Checksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_torque2Counter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_gear; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_gearRequest; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_brakePedalState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_brakePedal; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_torqueInterfaceFailure; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_epbParkRequest; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_epbInterfaceReady; /* scaling 1.0, offset 0.0, units none  */
} can_0x118_DI_torque2_t;

typedef struct {
	uint8_t ESP_135hChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_135hCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_stabilityControlSts; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_hillStartAssistActive; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_absBrakeEvent; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_brakeLamp; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_brakeDiscWipingActive; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_tcLampFlash; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_espFaultLamp; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_espLampFlash; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_tcOffLamp; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_messagePumpService; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_messagePumpFailure; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_messageEBDFailure; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_absFaultLamp; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_tcDisabledByFault; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_messageDynoModeActive; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_hydraulicBoostEnabled; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_espOffLamp; /* scaling 1.0, offset 0.0, units none  */
} can_0x135_ESP_135h_t;

typedef struct {
	uint16_t ESP_vehicleSpeed; /* scaling 0.0, offset 0.0, units kph  */
	uint8_t ESP_wheelPulseCountFrL; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_wheelPulseCountFrR; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_wheelPulseCountReL; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_wheelPulseCountReR; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_BChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_BCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ESP_vehicleSpeedQF; /* scaling 1.0, offset 0.0, units none  */
} can_0x155_ESP_B_t;

typedef struct {
	uint8_t EPB_epasControlChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPB_epasControlCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPB_epasEACAllow; /* scaling 1.0, offset 0.0, units none  */
} can_0x214_EPB_epasControl_t;

typedef struct {
	uint8_t AirTemp_Insd; /* scaling 0.2, offset 0.0, units C  */
	uint8_t AirTemp_Outsd; /* scaling 0.5, offset -40.0, units C  */
	uint8_t LgtSens_Twlgt; /* scaling 1.0, offset 0.0, units Steps  */
	uint8_t DrRLtch_FL_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DrRLtch_FR_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DrRLtch_RL_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DrRLtch_RR_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DL_RLtch_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EngHd_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Trlr_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t RevGr_Engg; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Bckl_Sw_RL_Stat_SAM_R; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Bckl_Sw_RR_Stat_SAM_R; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Bckl_Sw_RM_Stat_SAM_R; /* scaling 1.0, offset 0.0, units none  */
	uint8_t StW_Cond_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t VTA_Alm_Actv; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LgtSens_SNA; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LgtSens_Tunnel; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LgtSens_Flt; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LgtSens_Night; /* scaling 1.0, offset 0.0, units none  */
	uint8_t ADL_LoBm_On_Rq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Hrn_On; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Term54_Actv; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MPkBrk_Stat; /* scaling 1.0, offset 0.0, units none  */
	uint8_t WprOutsdPkPosn; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LoBm_On_Rq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t HiBm_On; /* scaling 1.0, offset 0.0, units none  */
	uint8_t IrLmp_D_Lt_Flt; /* scaling 1.0, offset 0.0, units none  */
	uint8_t IrLmp_P_Rt_Flt; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LoBm_D_Lt_Flt; /* scaling 1.0, offset 0.0, units none  */
	uint8_t LoBm_P_Rt_Flt; /* scaling 1.0, offset 0.0, units none  */
} can_0x283_BODY_R1_t;

typedef struct {
	uint16_t MCU_gpsVehicleHeading; /* scaling 0.0, offset 0.0, units deg  */
	uint16_t MCU_gpsVehicleSpeed; /* scaling 0.0, offset 0.0, units km/hr  */
	uint8_t MCU_gpsHDOP; /* scaling 0.1, offset 0.0, units 1  */
	uint8_t MCU_userSpeedOffset; /* scaling 1.0, offset -30.0, units kph/mph  */
	uint8_t MCU_mppSpeedLimit; /* scaling 5.0, offset 0.0, units kph/mph  */
	uint8_t MCU_userSpeedOffsetUnits; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MCU_speedLimitUnits; /* scaling 1.0, offset 0.0, units none  */
} can_0x2f8_MCU_gpsVehicleSpeed_t;

typedef struct {
	uint8_t YEAR; /* scaling 1.0, offset 2000.0, units Year  */
	uint8_t SECOND; /* scaling 1.0, offset 0.0, units s  */
	uint8_t MINUTE; /* scaling 1.0, offset 0.0, units min  */
	uint8_t Hour; /* scaling 1.0, offset 0.0, units h  */
	uint8_t DAY; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MONTH; /* scaling 1.0, offset 0.0, units Month  */
	uint8_t DOOR_STATE_FL; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DOOR_STATE_FR; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DOOR_STATE_RL; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DOOR_STATE_RR; /* scaling 1.0, offset 0.0, units none  */
	uint8_t BOOT_STATE; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_updateInProgress; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DOOR_STATE_FrontTrunk; /* scaling 1.0, offset 0.0, units none  */
	uint8_t CERRD; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MCU_factoryMode; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MCU_transportModeOn; /* scaling 1.0, offset 0.0, units none  */
} can_0x318_GTW_carState_t;

typedef struct {
	uint8_t GTW_statusChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_statusCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_driveRailReq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_brakePressed; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_driverPresent; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_notEnough12VForDrive; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_icPowerOff; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_driverIsLeaving; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_accGoingDown; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_driveGoingDown; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_accRailReq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_hvacRailReq; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_preconditionRequest; /* scaling 1.0, offset 0.0, units none  */
	uint8_t GTW_hvacGoingDown; /* scaling 1.0, offset 0.0, units none  */
} can_0x348_GTW_status_t;

typedef struct {
	uint16_t DI_analogSpeed; /* scaling 0.1, offset 0.0, units speed  */
	uint16_t DI_cruiseSet; /* scaling 0.5, offset 0.0, units speed  */
	uint8_t DI_digitalSpeed; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_stateChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_cruiseState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_stateCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_systemState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_vehicleHoldState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_state; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_immobilizerState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_aebState; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_proximity; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_driveReady; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_regenLight; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DI_speedUnits; /* scaling 1.0, offset 0.0, units none  */
} can_0x368_DI_state_t;

typedef struct {
	uint16_t EPAS_internalSAS; /* scaling 0.1, offset -819.2, units deg  */
	uint16_t EPAS_torsionBarTorque; /* scaling 0.0, offset -20.5, units Nm  */
	uint16_t EPAS_steeringRackForce; /* scaling 50.0, offset -25575.0, units N  */
	uint8_t EPAS_sysStatusChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_currentTuneMode; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_eacErrorCode; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_sysStatusCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_eacStatus; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_handsOnLevel; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_steeringFault; /* scaling 1.0, offset 0.0, units none  */
	uint8_t EPAS_steeringReduced; /* scaling 1.0, offset 0.0, units none  */
} can_0x370_EPAS_sysStatus_t;

typedef struct {
	uint8_t MCU_clusterBrightnessLevel; /* scaling 0.5, offset 0.0, units %  */
	uint8_t MCU_clusterReadyForPowerOff; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MCU_clusterReadyForDrive; /* scaling 1.0, offset 0.0, units none  */
	uint8_t MCU_clusterBacklightOn; /* scaling 1.0, offset 0.0, units none  */
} can_0x388_MCU_clusterBacklightRequest_t;

typedef struct {
	int32_t MCU_latitude; /* scaling 0.0, offset 0.0, units deg  */
	int32_t MCU_longitude; /* scaling 0.0, offset 0.0, units deg  */
	uint8_t MCU_gpsAccuracy; /* scaling 0.2, offset 0.0, units m  */
} can_0x3d8_MCU_locationStatus_t;

typedef struct {
	uint16_t DAS_steeringAngleRequest; /* scaling 0.1, offset -1638.3, units deg  */
	uint8_t DAS_steeringControlChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DAS_steeringControlCounter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DAS_steeringControlType; /* scaling 1.0, offset 0.0, units none  */
	uint8_t DAS_steeringHapticRequest; /* scaling 1.0, offset 0.0, units none  */
} can_0x488_DAS_steeringControl_t;

typedef struct {
	can_0x003_STW_ANGL_STAT_t can_0x003_STW_ANGL_STAT;
	can_0x00e_STW_ANGLHP_STAT_t can_0x00e_STW_ANGLHP_STAT;
	can_0x045_STW_ACTN_RQ_t can_0x045_STW_ACTN_RQ;
	can_0x06d_SBW_RQ_SCCM_t can_0x06d_SBW_RQ_SCCM;
	can_0x101_GTW_epasControl_t can_0x101_GTW_epasControl;
	can_0x108_DI_torque1_t can_0x108_DI_torque1;
	can_0x118_DI_torque2_t can_0x118_DI_torque2;
	can_0x135_ESP_135h_t can_0x135_ESP_135h;
	can_0x155_ESP_B_t can_0x155_ESP_B;
	can_0x214_EPB_epasControl_t can_0x214_EPB_epasControl;
	can_0x283_BODY_R1_t can_0x283_BODY_R1;
	can_0x2f8_MCU_gpsVehicleSpeed_t can_0x2f8_MCU_gpsVehicleSpeed;
	can_0x318_GTW_carState_t can_0x318_GTW_carState;
	can_0x348_GTW_status_t can_0x348_GTW_status;
	can_0x368_DI_state_t can_0x368_DI_state;
	can_0x370_EPAS_sysStatus_t can_0x370_EPAS_sysStatus;
	can_0x388_MCU_clusterBacklightRequest_t can_0x388_MCU_clusterBacklightRequest;
	can_0x3d8_MCU_locationStatus_t can_0x3d8_MCU_locationStatus;
	can_0x488_DAS_steeringControl_t can_0x488_DAS_steeringControl;
} can_obj_tesla_can_h_t;

int unpack_message(unsigned id, uint64_t data, uint8_t dlc);
int pack_message(unsigned id, uint64_t *data);
int print_message(unsigned id, FILE* data);

extern can_0x003_STW_ANGL_STAT_t can_0x003_STW_ANGL_STAT_data;
int pack_can_0x003_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *pack, uint64_t *data);
int unpack_can_0x003_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x003_StW_Angl(can_0x003_STW_ANGL_STAT_t *record, double *out);
bool encode_can_0x003_StW_Angl(can_0x003_STW_ANGL_STAT_t *record, double in);
bool decode_can_0x003_StW_AnglSpd(can_0x003_STW_ANGL_STAT_t *record, double *out);
bool encode_can_0x003_StW_AnglSpd(can_0x003_STW_ANGL_STAT_t *record, double in);
bool decode_can_0x003_CRC_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *record, uint8_t *out);
bool encode_can_0x003_CRC_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *record, uint8_t in);
bool decode_can_0x003_MC_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *record, uint8_t *out);
bool encode_can_0x003_MC_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *record, uint8_t in);
bool decode_can_0x003_StW_AnglSens_Stat(can_0x003_STW_ANGL_STAT_t *record, uint8_t *out);
bool encode_can_0x003_StW_AnglSens_Stat(can_0x003_STW_ANGL_STAT_t *record, uint8_t in);
bool decode_can_0x003_StW_AnglSens_Id(can_0x003_STW_ANGL_STAT_t *record, uint8_t *out);
bool encode_can_0x003_StW_AnglSens_Id(can_0x003_STW_ANGL_STAT_t *record, uint8_t in);
int print_can_0x003_STW_ANGL_STAT(can_0x003_STW_ANGL_STAT_t *print, FILE *data);


extern can_0x00e_STW_ANGLHP_STAT_t can_0x00e_STW_ANGLHP_STAT_data;
int pack_can_0x00e_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *pack, uint64_t *data);
int unpack_can_0x00e_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x00e_StW_AnglHP(can_0x00e_STW_ANGLHP_STAT_t *record, double *out);
bool encode_can_0x00e_StW_AnglHP(can_0x00e_STW_ANGLHP_STAT_t *record, double in);
bool decode_can_0x00e_StW_AnglHP_Spd(can_0x00e_STW_ANGLHP_STAT_t *record, double *out);
bool encode_can_0x00e_StW_AnglHP_Spd(can_0x00e_STW_ANGLHP_STAT_t *record, double in);
bool decode_can_0x00e_CRC_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t *out);
bool encode_can_0x00e_CRC_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t in);
bool decode_can_0x00e_MC_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t *out);
bool encode_can_0x00e_MC_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t in);
bool decode_can_0x00e_StW_AnglHP_Sens_Stat(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t *out);
bool encode_can_0x00e_StW_AnglHP_Sens_Stat(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t in);
bool decode_can_0x00e_StW_AnglHP_Sens_Id(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t *out);
bool encode_can_0x00e_StW_AnglHP_Sens_Id(can_0x00e_STW_ANGLHP_STAT_t *record, uint8_t in);
int print_can_0x00e_STW_ANGLHP_STAT(can_0x00e_STW_ANGLHP_STAT_t *print, FILE *data);


extern can_0x045_STW_ACTN_RQ_t can_0x045_STW_ACTN_RQ_data;
int pack_can_0x045_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *pack, uint64_t *data);
int unpack_can_0x045_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x045_DTR_Dist_Rq(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_DTR_Dist_Rq(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_CRC_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_CRC_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_SpdCtrlLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_SpdCtrlLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_MC_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_MC_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Lvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Lvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_WprSw6Posn(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_WprSw6Posn(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_TurnIndLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_TurnIndLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_HiBmLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_HiBmLvr_Stat(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_WprWashSw_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_WprWashSw_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_WprWash_R_Sw_Posn_V2(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_WprWash_R_Sw_Posn_V2(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Cond_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Cond_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_HrnSw_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_HrnSw_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_VSL_Enbl_Rq(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_VSL_Enbl_Rq(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_SpdCtrlLvrStat_Inv(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_SpdCtrlLvrStat_Inv(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Cond_Flt(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Cond_Flt(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw00_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw00_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw01_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw01_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw02_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw02_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw03_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw03_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw04_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw04_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw05_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw05_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw06_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw06_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw07_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw07_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw08_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw08_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw09_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw09_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw10_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw10_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw11_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw11_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw12_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw12_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw13_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw13_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw14_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw14_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
bool decode_can_0x045_StW_Sw15_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t *out);
bool encode_can_0x045_StW_Sw15_Psd(can_0x045_STW_ACTN_RQ_t *record, uint8_t in);
int print_can_0x045_STW_ACTN_RQ(can_0x045_STW_ACTN_RQ_t *print, FILE *data);


extern can_0x06d_SBW_RQ_SCCM_t can_0x06d_SBW_RQ_SCCM_data;
int pack_can_0x06d_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *pack, uint64_t *data);
int unpack_can_0x06d_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x06d_CRC_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_CRC_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
bool decode_can_0x06d_TSL_RND_Posn_StW(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_TSL_RND_Posn_StW(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
bool decode_can_0x06d_MC_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_MC_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
bool decode_can_0x06d_StW_Sw_Stat3(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_StW_Sw_Stat3(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
bool decode_can_0x06d_MsgTxmtId(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_MsgTxmtId(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
bool decode_can_0x06d_TSL_P_Psd_StW(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t *out);
bool encode_can_0x06d_TSL_P_Psd_StW(can_0x06d_SBW_RQ_SCCM_t *record, uint8_t in);
int print_can_0x06d_SBW_RQ_SCCM(can_0x06d_SBW_RQ_SCCM_t *print, FILE *data);


extern can_0x101_GTW_epasControl_t can_0x101_GTW_epasControl_data;
int pack_can_0x101_GTW_epasControl(can_0x101_GTW_epasControl_t *pack, uint64_t *data);
int unpack_can_0x101_GTW_epasControl(can_0x101_GTW_epasControl_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x101_GTW_epasControlChecksum(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasControlChecksum(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasPowerMode(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasPowerMode(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasControlCounter(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasControlCounter(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasTuneRequest(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasTuneRequest(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasControlType(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasControlType(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasEmergencyOn(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasEmergencyOn(can_0x101_GTW_epasControl_t *record, uint8_t in);
bool decode_can_0x101_GTW_epasLDWEnabled(can_0x101_GTW_epasControl_t *record, uint8_t *out);
bool encode_can_0x101_GTW_epasLDWEnabled(can_0x101_GTW_epasControl_t *record, uint8_t in);
int print_can_0x101_GTW_epasControl(can_0x101_GTW_epasControl_t *print, FILE *data);


extern can_0x108_DI_torque1_t can_0x108_DI_torque1_data;
int pack_can_0x108_DI_torque1(can_0x108_DI_torque1_t *pack, uint64_t *data);
int unpack_can_0x108_DI_torque1(can_0x108_DI_torque1_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x108_DI_motorRPM(can_0x108_DI_torque1_t *record, int16_t *out);
bool encode_can_0x108_DI_motorRPM(can_0x108_DI_torque1_t *record, int16_t in);
bool decode_can_0x108_DI_torqueDriver(can_0x108_DI_torque1_t *record, double *out);
bool encode_can_0x108_DI_torqueDriver(can_0x108_DI_torque1_t *record, double in);
bool decode_can_0x108_DI_torqueMotor(can_0x108_DI_torque1_t *record, double *out);
bool encode_can_0x108_DI_torqueMotor(can_0x108_DI_torque1_t *record, double in);
bool decode_can_0x108_DI_pedalPos(can_0x108_DI_torque1_t *record, double *out);
bool encode_can_0x108_DI_pedalPos(can_0x108_DI_torque1_t *record, double in);
bool decode_can_0x108_DI_torque1Checksum(can_0x108_DI_torque1_t *record, uint8_t *out);
bool encode_can_0x108_DI_torque1Checksum(can_0x108_DI_torque1_t *record, uint8_t in);
bool decode_can_0x108_DI_torque1Counter(can_0x108_DI_torque1_t *record, uint8_t *out);
bool encode_can_0x108_DI_torque1Counter(can_0x108_DI_torque1_t *record, uint8_t in);
bool decode_can_0x108_DI_soptState(can_0x108_DI_torque1_t *record, uint8_t *out);
bool encode_can_0x108_DI_soptState(can_0x108_DI_torque1_t *record, uint8_t in);
int print_can_0x108_DI_torque1(can_0x108_DI_torque1_t *print, FILE *data);


extern can_0x118_DI_torque2_t can_0x118_DI_torque2_data;
int pack_can_0x118_DI_torque2(can_0x118_DI_torque2_t *pack, uint64_t *data);
int unpack_can_0x118_DI_torque2(can_0x118_DI_torque2_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x118_DI_torqueEstimate(can_0x118_DI_torque2_t *record, double *out);
bool encode_can_0x118_DI_torqueEstimate(can_0x118_DI_torque2_t *record, double in);
bool decode_can_0x118_DI_vehicleSpeed(can_0x118_DI_torque2_t *record, double *out);
bool encode_can_0x118_DI_vehicleSpeed(can_0x118_DI_torque2_t *record, double in);
bool decode_can_0x118_DI_torque2Checksum(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_torque2Checksum(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_torque2Counter(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_torque2Counter(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_gear(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_gear(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_gearRequest(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_gearRequest(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_brakePedalState(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_brakePedalState(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_brakePedal(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_brakePedal(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_torqueInterfaceFailure(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_torqueInterfaceFailure(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_epbParkRequest(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_epbParkRequest(can_0x118_DI_torque2_t *record, uint8_t in);
bool decode_can_0x118_DI_epbInterfaceReady(can_0x118_DI_torque2_t *record, uint8_t *out);
bool encode_can_0x118_DI_epbInterfaceReady(can_0x118_DI_torque2_t *record, uint8_t in);
int print_can_0x118_DI_torque2(can_0x118_DI_torque2_t *print, FILE *data);


extern can_0x135_ESP_135h_t can_0x135_ESP_135h_data;
int pack_can_0x135_ESP_135h(can_0x135_ESP_135h_t *pack, uint64_t *data);
int unpack_can_0x135_ESP_135h(can_0x135_ESP_135h_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x135_ESP_135hChecksum(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_135hChecksum(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_135hCounter(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_135hCounter(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_stabilityControlSts(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_stabilityControlSts(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_hillStartAssistActive(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_hillStartAssistActive(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_absBrakeEvent(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_absBrakeEvent(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_brakeLamp(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_brakeLamp(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_brakeDiscWipingActive(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_brakeDiscWipingActive(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_tcLampFlash(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_tcLampFlash(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_espFaultLamp(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_espFaultLamp(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_espLampFlash(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_espLampFlash(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_tcOffLamp(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_tcOffLamp(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_messagePumpService(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_messagePumpService(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_messagePumpFailure(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_messagePumpFailure(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_messageEBDFailure(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_messageEBDFailure(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_absFaultLamp(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_absFaultLamp(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_tcDisabledByFault(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_tcDisabledByFault(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_messageDynoModeActive(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_messageDynoModeActive(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_hydraulicBoostEnabled(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_hydraulicBoostEnabled(can_0x135_ESP_135h_t *record, uint8_t in);
bool decode_can_0x135_ESP_espOffLamp(can_0x135_ESP_135h_t *record, uint8_t *out);
bool encode_can_0x135_ESP_espOffLamp(can_0x135_ESP_135h_t *record, uint8_t in);
int print_can_0x135_ESP_135h(can_0x135_ESP_135h_t *print, FILE *data);


extern can_0x155_ESP_B_t can_0x155_ESP_B_data;
int pack_can_0x155_ESP_B(can_0x155_ESP_B_t *pack, uint64_t *data);
int unpack_can_0x155_ESP_B(can_0x155_ESP_B_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x155_ESP_vehicleSpeed(can_0x155_ESP_B_t *record, double *out);
bool encode_can_0x155_ESP_vehicleSpeed(can_0x155_ESP_B_t *record, double in);
bool decode_can_0x155_ESP_wheelPulseCountFrL(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_wheelPulseCountFrL(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_wheelPulseCountFrR(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_wheelPulseCountFrR(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_wheelPulseCountReL(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_wheelPulseCountReL(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_wheelPulseCountReR(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_wheelPulseCountReR(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_BChecksum(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_BChecksum(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_BCounter(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_BCounter(can_0x155_ESP_B_t *record, uint8_t in);
bool decode_can_0x155_ESP_vehicleSpeedQF(can_0x155_ESP_B_t *record, uint8_t *out);
bool encode_can_0x155_ESP_vehicleSpeedQF(can_0x155_ESP_B_t *record, uint8_t in);
int print_can_0x155_ESP_B(can_0x155_ESP_B_t *print, FILE *data);


extern can_0x214_EPB_epasControl_t can_0x214_EPB_epasControl_data;
int pack_can_0x214_EPB_epasControl(can_0x214_EPB_epasControl_t *pack, uint64_t *data);
int unpack_can_0x214_EPB_epasControl(can_0x214_EPB_epasControl_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x214_EPB_epasControlChecksum(can_0x214_EPB_epasControl_t *record, uint8_t *out);
bool encode_can_0x214_EPB_epasControlChecksum(can_0x214_EPB_epasControl_t *record, uint8_t in);
bool decode_can_0x214_EPB_epasControlCounter(can_0x214_EPB_epasControl_t *record, uint8_t *out);
bool encode_can_0x214_EPB_epasControlCounter(can_0x214_EPB_epasControl_t *record, uint8_t in);
bool decode_can_0x214_EPB_epasEACAllow(can_0x214_EPB_epasControl_t *record, uint8_t *out);
bool encode_can_0x214_EPB_epasEACAllow(can_0x214_EPB_epasControl_t *record, uint8_t in);
int print_can_0x214_EPB_epasControl(can_0x214_EPB_epasControl_t *print, FILE *data);


extern can_0x283_BODY_R1_t can_0x283_BODY_R1_data;
int pack_can_0x283_BODY_R1(can_0x283_BODY_R1_t *pack, uint64_t *data);
int unpack_can_0x283_BODY_R1(can_0x283_BODY_R1_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x283_AirTemp_Insd(can_0x283_BODY_R1_t *record, double *out);
bool encode_can_0x283_AirTemp_Insd(can_0x283_BODY_R1_t *record, double in);
bool decode_can_0x283_AirTemp_Outsd(can_0x283_BODY_R1_t *record, double *out);
bool encode_can_0x283_AirTemp_Outsd(can_0x283_BODY_R1_t *record, double in);
bool decode_can_0x283_LgtSens_Twlgt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LgtSens_Twlgt(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_DrRLtch_FL_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_DrRLtch_FL_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_DrRLtch_FR_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_DrRLtch_FR_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_DrRLtch_RL_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_DrRLtch_RL_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_DrRLtch_RR_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_DrRLtch_RR_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_DL_RLtch_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_DL_RLtch_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_EngHd_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_EngHd_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Trlr_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Trlr_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_RevGr_Engg(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_RevGr_Engg(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Bckl_Sw_RL_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Bckl_Sw_RL_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Bckl_Sw_RR_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Bckl_Sw_RR_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Bckl_Sw_RM_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Bckl_Sw_RM_Stat_SAM_R(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_StW_Cond_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_StW_Cond_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_VTA_Alm_Actv(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_VTA_Alm_Actv(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LgtSens_SNA(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LgtSens_SNA(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LgtSens_Tunnel(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LgtSens_Tunnel(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LgtSens_Flt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LgtSens_Flt(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LgtSens_Night(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LgtSens_Night(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_ADL_LoBm_On_Rq(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_ADL_LoBm_On_Rq(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Hrn_On(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Hrn_On(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_Term54_Actv(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_Term54_Actv(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_MPkBrk_Stat(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_MPkBrk_Stat(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_WprOutsdPkPosn(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_WprOutsdPkPosn(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LoBm_On_Rq(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LoBm_On_Rq(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_HiBm_On(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_HiBm_On(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_IrLmp_D_Lt_Flt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_IrLmp_D_Lt_Flt(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_IrLmp_P_Rt_Flt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_IrLmp_P_Rt_Flt(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LoBm_D_Lt_Flt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LoBm_D_Lt_Flt(can_0x283_BODY_R1_t *record, uint8_t in);
bool decode_can_0x283_LoBm_P_Rt_Flt(can_0x283_BODY_R1_t *record, uint8_t *out);
bool encode_can_0x283_LoBm_P_Rt_Flt(can_0x283_BODY_R1_t *record, uint8_t in);
int print_can_0x283_BODY_R1(can_0x283_BODY_R1_t *print, FILE *data);


extern can_0x2f8_MCU_gpsVehicleSpeed_t can_0x2f8_MCU_gpsVehicleSpeed_data;
int pack_can_0x2f8_MCU_gpsVehicleSpeed(can_0x2f8_MCU_gpsVehicleSpeed_t *pack, uint64_t *data);
int unpack_can_0x2f8_MCU_gpsVehicleSpeed(can_0x2f8_MCU_gpsVehicleSpeed_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x2f8_MCU_gpsVehicleHeading(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double *out);
bool encode_can_0x2f8_MCU_gpsVehicleHeading(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double in);
bool decode_can_0x2f8_MCU_gpsVehicleSpeed(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double *out);
bool encode_can_0x2f8_MCU_gpsVehicleSpeed(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double in);
bool decode_can_0x2f8_MCU_gpsHDOP(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double *out);
bool encode_can_0x2f8_MCU_gpsHDOP(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double in);
bool decode_can_0x2f8_MCU_userSpeedOffset(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double *out);
bool encode_can_0x2f8_MCU_userSpeedOffset(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double in);
bool decode_can_0x2f8_MCU_mppSpeedLimit(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double *out);
bool encode_can_0x2f8_MCU_mppSpeedLimit(can_0x2f8_MCU_gpsVehicleSpeed_t *record, double in);
bool decode_can_0x2f8_MCU_userSpeedOffsetUnits(can_0x2f8_MCU_gpsVehicleSpeed_t *record, uint8_t *out);
bool encode_can_0x2f8_MCU_userSpeedOffsetUnits(can_0x2f8_MCU_gpsVehicleSpeed_t *record, uint8_t in);
bool decode_can_0x2f8_MCU_speedLimitUnits(can_0x2f8_MCU_gpsVehicleSpeed_t *record, uint8_t *out);
bool encode_can_0x2f8_MCU_speedLimitUnits(can_0x2f8_MCU_gpsVehicleSpeed_t *record, uint8_t in);
int print_can_0x2f8_MCU_gpsVehicleSpeed(can_0x2f8_MCU_gpsVehicleSpeed_t *print, FILE *data);


extern can_0x318_GTW_carState_t can_0x318_GTW_carState_data;
int pack_can_0x318_GTW_carState(can_0x318_GTW_carState_t *pack, uint64_t *data);
int unpack_can_0x318_GTW_carState(can_0x318_GTW_carState_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x318_YEAR(can_0x318_GTW_carState_t *record, double *out);
bool encode_can_0x318_YEAR(can_0x318_GTW_carState_t *record, double in);
bool decode_can_0x318_SECOND(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_SECOND(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_MINUTE(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_MINUTE(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_Hour(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_Hour(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DAY(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DAY(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_MONTH(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_MONTH(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DOOR_STATE_FL(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DOOR_STATE_FL(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DOOR_STATE_FR(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DOOR_STATE_FR(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DOOR_STATE_RL(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DOOR_STATE_RL(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DOOR_STATE_RR(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DOOR_STATE_RR(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_BOOT_STATE(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_BOOT_STATE(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_GTW_updateInProgress(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_GTW_updateInProgress(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_DOOR_STATE_FrontTrunk(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_DOOR_STATE_FrontTrunk(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_CERRD(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_CERRD(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_MCU_factoryMode(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_MCU_factoryMode(can_0x318_GTW_carState_t *record, uint8_t in);
bool decode_can_0x318_MCU_transportModeOn(can_0x318_GTW_carState_t *record, uint8_t *out);
bool encode_can_0x318_MCU_transportModeOn(can_0x318_GTW_carState_t *record, uint8_t in);
int print_can_0x318_GTW_carState(can_0x318_GTW_carState_t *print, FILE *data);


extern can_0x348_GTW_status_t can_0x348_GTW_status_data;
int pack_can_0x348_GTW_status(can_0x348_GTW_status_t *pack, uint64_t *data);
int unpack_can_0x348_GTW_status(can_0x348_GTW_status_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x348_GTW_statusChecksum(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_statusChecksum(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_statusCounter(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_statusCounter(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_driveRailReq(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_driveRailReq(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_brakePressed(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_brakePressed(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_driverPresent(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_driverPresent(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_notEnough12VForDrive(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_notEnough12VForDrive(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_icPowerOff(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_icPowerOff(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_driverIsLeaving(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_driverIsLeaving(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_accGoingDown(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_accGoingDown(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_driveGoingDown(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_driveGoingDown(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_accRailReq(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_accRailReq(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_hvacRailReq(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_hvacRailReq(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_preconditionRequest(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_preconditionRequest(can_0x348_GTW_status_t *record, uint8_t in);
bool decode_can_0x348_GTW_hvacGoingDown(can_0x348_GTW_status_t *record, uint8_t *out);
bool encode_can_0x348_GTW_hvacGoingDown(can_0x348_GTW_status_t *record, uint8_t in);
int print_can_0x348_GTW_status(can_0x348_GTW_status_t *print, FILE *data);


extern can_0x368_DI_state_t can_0x368_DI_state_data;
int pack_can_0x368_DI_state(can_0x368_DI_state_t *pack, uint64_t *data);
int unpack_can_0x368_DI_state(can_0x368_DI_state_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x368_DI_analogSpeed(can_0x368_DI_state_t *record, double *out);
bool encode_can_0x368_DI_analogSpeed(can_0x368_DI_state_t *record, double in);
bool decode_can_0x368_DI_cruiseSet(can_0x368_DI_state_t *record, double *out);
bool encode_can_0x368_DI_cruiseSet(can_0x368_DI_state_t *record, double in);
bool decode_can_0x368_DI_digitalSpeed(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_digitalSpeed(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_stateChecksum(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_stateChecksum(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_cruiseState(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_cruiseState(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_stateCounter(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_stateCounter(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_systemState(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_systemState(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_vehicleHoldState(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_vehicleHoldState(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_state(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_state(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_immobilizerState(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_immobilizerState(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_aebState(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_aebState(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_proximity(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_proximity(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_driveReady(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_driveReady(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_regenLight(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_regenLight(can_0x368_DI_state_t *record, uint8_t in);
bool decode_can_0x368_DI_speedUnits(can_0x368_DI_state_t *record, uint8_t *out);
bool encode_can_0x368_DI_speedUnits(can_0x368_DI_state_t *record, uint8_t in);
int print_can_0x368_DI_state(can_0x368_DI_state_t *print, FILE *data);


extern can_0x370_EPAS_sysStatus_t can_0x370_EPAS_sysStatus_data;
int pack_can_0x370_EPAS_sysStatus(can_0x370_EPAS_sysStatus_t *pack, uint64_t *data);
int unpack_can_0x370_EPAS_sysStatus(can_0x370_EPAS_sysStatus_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x370_EPAS_internalSAS(can_0x370_EPAS_sysStatus_t *record, double *out);
bool encode_can_0x370_EPAS_internalSAS(can_0x370_EPAS_sysStatus_t *record, double in);
bool decode_can_0x370_EPAS_torsionBarTorque(can_0x370_EPAS_sysStatus_t *record, double *out);
bool encode_can_0x370_EPAS_torsionBarTorque(can_0x370_EPAS_sysStatus_t *record, double in);
bool decode_can_0x370_EPAS_steeringRackForce(can_0x370_EPAS_sysStatus_t *record, double *out);
bool encode_can_0x370_EPAS_steeringRackForce(can_0x370_EPAS_sysStatus_t *record, double in);
bool decode_can_0x370_EPAS_sysStatusChecksum(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_sysStatusChecksum(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_currentTuneMode(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_currentTuneMode(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_eacErrorCode(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_eacErrorCode(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_sysStatusCounter(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_sysStatusCounter(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_eacStatus(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_eacStatus(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_handsOnLevel(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_handsOnLevel(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_steeringFault(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_steeringFault(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
bool decode_can_0x370_EPAS_steeringReduced(can_0x370_EPAS_sysStatus_t *record, uint8_t *out);
bool encode_can_0x370_EPAS_steeringReduced(can_0x370_EPAS_sysStatus_t *record, uint8_t in);
int print_can_0x370_EPAS_sysStatus(can_0x370_EPAS_sysStatus_t *print, FILE *data);


extern can_0x388_MCU_clusterBacklightRequest_t can_0x388_MCU_clusterBacklightRequest_data;
int pack_can_0x388_MCU_clusterBacklightRequest(can_0x388_MCU_clusterBacklightRequest_t *pack, uint64_t *data);
int unpack_can_0x388_MCU_clusterBacklightRequest(can_0x388_MCU_clusterBacklightRequest_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x388_MCU_clusterBrightnessLevel(can_0x388_MCU_clusterBacklightRequest_t *record, double *out);
bool encode_can_0x388_MCU_clusterBrightnessLevel(can_0x388_MCU_clusterBacklightRequest_t *record, double in);
bool decode_can_0x388_MCU_clusterReadyForPowerOff(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t *out);
bool encode_can_0x388_MCU_clusterReadyForPowerOff(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t in);
bool decode_can_0x388_MCU_clusterReadyForDrive(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t *out);
bool encode_can_0x388_MCU_clusterReadyForDrive(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t in);
bool decode_can_0x388_MCU_clusterBacklightOn(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t *out);
bool encode_can_0x388_MCU_clusterBacklightOn(can_0x388_MCU_clusterBacklightRequest_t *record, uint8_t in);
int print_can_0x388_MCU_clusterBacklightRequest(can_0x388_MCU_clusterBacklightRequest_t *print, FILE *data);


extern can_0x3d8_MCU_locationStatus_t can_0x3d8_MCU_locationStatus_data;
int pack_can_0x3d8_MCU_locationStatus(can_0x3d8_MCU_locationStatus_t *pack, uint64_t *data);
int unpack_can_0x3d8_MCU_locationStatus(can_0x3d8_MCU_locationStatus_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x3d8_MCU_latitude(can_0x3d8_MCU_locationStatus_t *record, double *out);
bool encode_can_0x3d8_MCU_latitude(can_0x3d8_MCU_locationStatus_t *record, double in);
bool decode_can_0x3d8_MCU_longitude(can_0x3d8_MCU_locationStatus_t *record, double *out);
bool encode_can_0x3d8_MCU_longitude(can_0x3d8_MCU_locationStatus_t *record, double in);
bool decode_can_0x3d8_MCU_gpsAccuracy(can_0x3d8_MCU_locationStatus_t *record, double *out);
bool encode_can_0x3d8_MCU_gpsAccuracy(can_0x3d8_MCU_locationStatus_t *record, double in);
int print_can_0x3d8_MCU_locationStatus(can_0x3d8_MCU_locationStatus_t *print, FILE *data);


extern can_0x488_DAS_steeringControl_t can_0x488_DAS_steeringControl_data;
int pack_can_0x488_DAS_steeringControl(can_0x488_DAS_steeringControl_t *pack, uint64_t *data);
int unpack_can_0x488_DAS_steeringControl(can_0x488_DAS_steeringControl_t *unpack, uint64_t data, uint8_t dlc);

bool decode_can_0x488_DAS_steeringAngleRequest(can_0x488_DAS_steeringControl_t *record, double *out);
bool encode_can_0x488_DAS_steeringAngleRequest(can_0x488_DAS_steeringControl_t *record, double in);
bool decode_can_0x488_DAS_steeringControlChecksum(can_0x488_DAS_steeringControl_t *record, uint8_t *out);
bool encode_can_0x488_DAS_steeringControlChecksum(can_0x488_DAS_steeringControl_t *record, uint8_t in);
bool decode_can_0x488_DAS_steeringControlCounter(can_0x488_DAS_steeringControl_t *record, uint8_t *out);
bool encode_can_0x488_DAS_steeringControlCounter(can_0x488_DAS_steeringControl_t *record, uint8_t in);
bool decode_can_0x488_DAS_steeringControlType(can_0x488_DAS_steeringControl_t *record, uint8_t *out);
bool encode_can_0x488_DAS_steeringControlType(can_0x488_DAS_steeringControl_t *record, uint8_t in);
bool decode_can_0x488_DAS_steeringHapticRequest(can_0x488_DAS_steeringControl_t *record, uint8_t *out);
bool encode_can_0x488_DAS_steeringHapticRequest(can_0x488_DAS_steeringControl_t *record, uint8_t in);
int print_can_0x488_DAS_steeringControl(can_0x488_DAS_steeringControl_t *print, FILE *data);


#ifdef __cplusplus
} 
#endif

#endif
